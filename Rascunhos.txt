https://drive.google.com/drive/folders/1hOl0DaPeAor7gnhKBUIlZ5n8lLRDNvUY

nome = input("Digite seu nome:")
nota1 = float(input("Digite a nota 1:"))
nota1 = float(input("Digite a nota 2:"))
nota1 = float(input("Digite a nota 3:"))

soma = nota1 + nota2 + nota3

media = soma/3



if media >= 7:
	print(f"{nome} você foi aprovado!")
elif media <=5:
	print(f"{nome} você foi reprovado!")
elif media<7 and media>5:
	print(f"{nome} você está de recuperação!")
else:
	print("inválido")

------------------------
nomes - ['Pedro', 'João', 'Leiticia']
for n in nomes: 
	print(n)
----------------------------------------

print(nomes[0:3])

for i in range(3):
	print(nomes[i])

------------------------
contador = 0 

while contador < 5:
	print(contador)
	contador = contador +1
-------------------------------
while True:

	cpf = input("Insira seu CPF:")
	if len(cpf) != 11:
		pass
	else:
		break

print("O cpf não tem 11 digitos")

-----------------------------

while True:

	cpf = input("Insira seu CPF:")
	if len(cpf) != 11:
	print("O cpf deve ter 11 digitos")
	else:
		break

------------------------
print("100 - Hot Dog - R$ 1,10")
print("101 - Hot Dog - R$ 1,40")
print("102 - Hot Dog - R$ 1,50")

codigo = int(input("Digite o código do seu pedido:"))
qtd = int(input("Digite a quantidade: "))
--------------------------------------------

for i in range(1,11):
	calculo = i*13
	print(f"{i}. {i}x13 = {i*13} = {calculo}" )
----------------------------------------
def Quest 2():
	Quantidade = 0
	
	for i range(10):
		numero = int(input("Insira um número"))
	
	if numero >= 10 and numero <=50:
		quantidade = quantidade + 1

print("Numeros dentro do intervalo é", quantidade)
----------------------------------------------------
for i in range(5):
    numero = int(input("Digite um inteiro:"))
if  menor == 0:
    menor = numero
elif numero <= menor:
     menor = numero
print("O menor numero inserido foi:",menor)	


codecombat.com/students?_cc=Stop0nlySword



if numero <= menor:
	   menor = numero:
(print)menor

-----------------------------
	num1 = int(input("Escreva o número 1: "))
	num2 = int(input("Escreva o número 2: "))
	num3 = int(input("Escreva o número 3: "))
	
	lista = [num1,num2,num3]
	lista.sort(reverse=true)
	
	print(lista)

------------------------------	

	def questao4Simples():
    num1 = int(input("Escreva o número 1: "))
    num2 = int(input("Escreva o número 2: "))
    num3 = int(input("Escreva o número 3: "))

    lista = [num1,num2,num3]
    lista.sort(reverse=True)

    print(lista)

def questao4Complexa():

    num1 = int(input("Escreva o número 1: "))
    num2 = int(input("Escreva o número 2: "))
    num3 = int(input("Escreva o número 3: "))

    primeiro = None
    segundo = None
    terceiro = None

    if (num1 != num2 and num1 != num3 and num2 != num3):

        if(num1 > num2 and num1 > num3):
            primeiro = num1
            if (num2 > num3):
                segundo = num2
                terceiro = num3
            else:
                segundo = num3
                terceiro = num2

        elif (num2 > num1 and num2 > num3):
            primeiro = num2
            if (num1 > num3):
                segundo = num1
                terceiro = num3
            else:
                segundo = num3
                terceiro = num1

        else:
            primeiro = num3
            if (num1 > num2):
                segundo = num1
                terceiro = num2
            else:
                segundo = num2
                terceiro = num1
        
        print(primeiro,segundo,terceiro)
    

    else:
        print("Você escreveu números iguais.")



Else:		
	print("Você escreveu números iguais.")

------------------------------------------
codigo = input("Insira o código do produto escolhido: ")
    
    quantidade = int(input("Quantos deseja comprar: "))

    preco = 0
    nome = ""

    if codigo == "100":
        nome = "Cachorro Quente"
        preco = 1.10
    elif codigo == "101":
        nome = "Bauru Simples"
        preco = 1.30
    elif codigo == "102":
        nome = "Bauru c/ ovo"
        preco = 1.50
    elif codigo == "103":
        nome = "Hamburguer"
        preco = 1.10
    elif codigo == "104":
        nome = "Cheeseburguer"
        preco = 1.30
    elif codigo == "105":
        nome = "Refrigerante"
        preco = 1.00

    # match codigo:
    #     case "100":
    #         nome = "Cachorro Quente"
    #         preco = 1.10
    #     case "101":
    #         nome = "Bauru Simples"
    #         preco = 1.30
    #     case "102":
    #         nome = "Bauru c/ ovo"
    #         preco = 1.50
    #     case "103":
    #         nome = "Hamburguer"
    #         preco = 1.10
    #     case "104":
    #         nome = "Cheeseburguer"
    #         preco = 1.30
    #     case "105":
    #         nome = "Refrigerante"
    #         preco = 1.00
        

    valorTotal = preco * quantidade
    print(f"Você comprou {quantidade} {nome} por R$ {valorTotal}")
------------------------------------------
codigo = input("Insira o código do produto escolhido: ")

quantidade = int(input("Quantos deseja comprar: "))

preco = 0
nome = ""

if codigo == "100" or codigo "101" or codigo "102" or codigo "103" or codigo "104" or codigo "105"
codigos = ("100", "101", "102", "103", "104", "105")
codigos = 

if codigo == "100":
	nome = "Cachorro Quente"
	preco = 1.10
elif codigo == "101":
	nome = "Bauru Simples"
	preco = 1.30
elif codigo == "102":
	nome = "Bauru c/ ovo"
	preco = 1.50
elif codigo == "103":
	nome = "Hamburguer"
	preco = 1.10
elif codigo == "104":
	nome = "Cheeseburguer"
	preco = 1.30
elif codigo == "105":
	nome = "Refrigerante"
	preco = 1.00

# match codigo:
#     case "100":
#         nome = "Cachorro Quente"
#         preco = 1.10
#     case "101":
#         nome = "Bauru Simples"
#         preco = 1.30
#     case "102":
#         nome = "Bauru c/ ovo"
#         preco = 1.50
#     case "103":
#         nome = "Hamburguer"
#         preco = 1.10
#     case "104":
#         nome = "Cheeseburguer"
#         preco = 1.30
#     case "105":
#         nome = "Refrigerante"
#         preco = 1.00
	

valorTotal = preco * quantidade
print(f"Você comprou {quantidade} {nome} por R${valorTotal}")
	else:
	print("Insira um código válido")
-------------------------------------------
metodo for
	
	for i in range(1,11):
		tabuada = 13 * i
	print(f"13 x {i} = {tabuada}")
	
metodo while
	contador = 1
	while contador <=10:
	tabuada = 13 * contador
	print(f"13 x {contador} = {tabuada}")
	contador = contador + 1
---------------------------------
numeroNoIntervalo = 0

	for i in range(10):
	numero = float(input("Digite um número:"))
	
	if numero >= 10 and numero <= 50:
	numerosNoIntervalo = numerosNoIntervalo + 1
	(print"Quantidade de números entre 10 e 50:",numerosNoIntervalo)
-------------------------------------
for i in range (5):
	numero = int(input("Insira um número inteiro: "))
	
if i menor == 0:
	menor = numero
else:	
	if numero < menor:
	menor = numero
(print"O menor número foi", menor) 
---------------------------------------
soma = 0 

for i in range(1,101):
	soma = soma + 1

print("Somatório de 1 até 100 é", soma)
----------------------------------------

altura = int (input("Escreva a altura do retângulo:"))
largura = int(input("Escreva a largura do retângulo:"))

linha = ""

for i in range(largura):
	linha = linha + "#"

retangulo = ""

for i in range(altura):
	retangulo = retangulo + "\n" + linha
print(retangulo)
----------------------------
numero = int(input("Digite um número inteiro:"))

contador = 0

for i in range(1,numero+1):

	if numero % i == 0:
	contador = contador + 1
	print(contador "-",i)

if contador <= 2:
	print(numero, "É primo")
else:
	print(numero, "Não é primo")
-----------------------------------
numero = int(input("Digite um número inteiro:"))

ehPrimo = True

for i in range(2,numero):

	if numero % i == 0:
	   ehPrimo = False

if ehPrimo:
	print("É primo")
else:
	print("Não é primo")
-------------------------------


aluno = ['Murilo', '19', 1.79] 

print(type(aluno))
print(aluno)
---------------------------

programadores = [Victor, 'Juliana', 'Samuel', 'Caio', 'Luana']
print(type(programadores))
print(len(programadores))
print(programadores[4])

nome = input("Digite um nome:")

if nome in programadores
	print(nome, "Está na lista")
else:
	print(nome,"Não está na lista")
for programador in programadores

	if nome == programador:
	print(nome,"Está na lista")
----------------------------------------
for i in range(len(programadores)):

	if nome == programadores[i]:
	  print(nome,"Está na lista, na posição",i)

.sort = ordem alfabética
.count = contar quantas vezes há algo
print("texto".count(t))
------------------------------------
lista = [20,35,67,10,-50]
soma = 0

for numero in lista:

	soma = soma + numero 
print(soma)
----------------------------

	
-----------------------------
lista [10,30,25,10,85,0]

print(max(lista))
	------

maior = lista[0]
for numero in lista:

	if numero > maior:
	   maior = numero
print(maior)

	--------
for in range (len(lista)):
if i == 0:
	maior = lista[i]
else:
	if lista[i] > maior:
	maior = lista[i}
	
print(maior)
--------------------------
lista = [10,30,25,10,80]

menor = lista[0]

for numero in lista:
	if numero < menor:
	menor = numero
print(menor)
----------------------
lista = ['abc', 'xyz', 'aba', '1221']
contador = 0

for termo in lista:
	if len(termo) >= 2:
	  if termo[0] == termo[len(termo)-1]: 
	    contador +=1
print(contador)
----------------------
vogais = ('a', 'e', 'i' , 'o', 'u')
vogais[1] = 'E'
--------------------------
nome = input("Digite um nome: ")
numeroLetras = len(nome) - nome.count(" ")

print("Número de letras", len(nome))
print("Primeira letra", nome[0])
------------------------------------
print(nome[::-1]
-----------------------------
palavra = "bom dia"
inverso = ""

print(palavra[::-1])

for i in range (len(palavra)):
	inverso += palavra [-(i+1)]
	inverso += palavra[len(palavra)-1-i]
print(inverso)
----------------------------------------
paises = ['Argentina', 'Brasil']
print(len(paises))
----------------------------------------

palavra = input("Digite uma palavra:")

print(palavra[::-1])

palavrainvertida = ""

for i in range(len(palavra)):
	palavrainvertida = palavrainvertida + palavra[len(palavra)-1-i]
	print(palavrainvertida)
--------------------------------------------------
invertido = list(reversed(palavra))
(print*invertido)
-------------------------------------------
palavra = input("Digite uma palavra:")

for i in range(len(palavra)):
	if i % 2 == 0:
		print(f"{i+1} {palavra[i]}") 

---------------------------
times_rj = ('Botafogo', 'Flamengo', 'Fluminense', 'Vasco')

print(type(times_rj))
print(times_rj)
-------------------------------------------
lista = [(2,5), (1,2), (4,4), (2,3), (2,1), (5,5), (10,100), (2,2)]

novaLista = []

for tupla in lista:
	novaLista.append(tupla[::-1])
novaLista.sort()

lista.clear()

for tupla in novaLista:
	lista.append(tupla[::-1])

print(lista)
------------------------------------
def hello(meu_nome):
	print('Olá', meu_nome)
-------------------------------
hello('Fabio')
Olá fabio
meu_nome
'Fabio'
-----------------------------

def calcular_pagamento(qtd_horas, valor_hora):
	horas = float(qtd_horas)
	taxa = float(valor_hora)
	if horas <= 40:
	   salario=horas*taxa
	else:
	   h_excd = horas - 40
	   salario = 40*taxa+(h_excd*(1.5*taxa))
	return salario

----------------------------------
str_horas= input('Digite as horas: ')
str_taxa=input('Digite a taxa: ')
total_salario = calcular_pagamento(str_horas, str_taxa)
total_salario = calcular_pagamento(str_horas, str_taxa)
print('O valor de seus rendimentos é R$:', total_salario)
-------------------------------------------------------
def hello(nome, sobrenome, idade):
	print('Hello', nome, sobrenome, idade)

hello(idade=20, 'Fabio', sobrenome="Martins")
----------------------------------------------
def test(num1, num2, op):

numero1 = float(num1)
numero2 = float(num2)

if op == "+":
	return numero 1 + numero 2
elif op == "-":
	return numero 1 - numero 2
else:
	return "Escolha outro operador"

----------------------------------

def calculo_imc(peso, altura):
	print(peso / altura ** 2)

calculo_imc(peso = 75, altura = 1.68)
---------------------------------------
conta = float(input("Valor da conta R$: "))
print('gorjeta R$:',conta * 0.1)
print('Total da conta com a gorjeta R$:',conta+conta * 0.1)
-------------------------------------------------------------
def calculaGorjeta(valorConta):
	gorjeta = float(valorConta) * 0.1
	
	return gorjeta

conta = input("Digite o valor da conta: ")

gorjetaConta = calculaGorjeta(conta)

totalConta = float(conta) + gorjetaConta

print("Valor da gorjeta R$", gorjetaConta)
print("Valor total da conta R$", totalConta)
----------------------------------------------
def contaLetras(palavra,letra):
	contador = 0
	
	for l in palavra:
		if l == letra:
			contador +=1
	return contador

pal = input("Digite uma palavra)
let = input("Digite uma letra:")

contagem = contaLetras(pal,let)

print(f"A letra {let} aparece {contagem} vezes na palavra {pal}"
-------------------------------------------
for l.lower() in palavra.lower():
contagem2 = pal.lower().count
----------------------------------------------
def contaLetras(palavra,letra):
	contador = 0
	
	for l in palavra:
		if l.lower() == letra.lower():
			contador +=1
		
	return contador

pal = input("Digite uma palavra:")
let = input("Digite uma letra:")

contagem = contaLetras(pal,let)

print(f"A letra {let} aparece {contagem} vezes na palavra {pal}")

----------------------------------------
def listaIntervalo(lista,limiteInf,limiteSup):
	
	novaLista = []

	for n in lista:
		if n>=limiteInf and n <= limiteSup:
			novaLista.append(n)

print(novaLista)

listaNumero = [10,20,25,30,44,32,11,15,27,39,100,48,67,89]

listaNumero.sort()

listaIntervalo(listaNumero.15.100)
-----------------------------------------
def potencia(base,expoente):
	resultado = 1
	for numero in range(1,expoente+1):
		# base ** expoente = base * base (expoente vezes)
		resultado = resultado * base
	return resultado

-------------------------------------------

def aumentarSalario(self, percentualdeAumento):
	self.salario = self.salario * (100 + percentualdeAumento)/100
	return self.salario
.aumentarSalario(10)
---------------------------------------------
class Carro:
	def __init__(self, marca, modelo, ano):
		self.marca = marca
		self.modelo = modelo
		self.ano = ano

	def informacoes(self):
		mensagem = f"{self.marca} - {self.modelo} - {self.ano}"
		return mensagem

	def acelerar(self, velocidade):

		print(f"O carro {self.marca} - {self.modelo} acelerou para {velocidade}km/h")


meuCarro = Carro("Fiat", "Uno", 2000)

print(meuCarro.informacoes())
meuCarro.acelerar(80)
--------------------------------------------------
class Agenda:
	def __init__(self, listadeContatos, maxContatos):
		self.listadeContatos = listadeContatos
		self.maxContatos = maxContatos

	def adicionarContato(self)
		pass
	def removerContato(self):
		pass
	def informacoes(self):
		pass

class Contato:
	def __init__(self, nome, telefone):
		self.nome = nome
		self.telefone = telefone

------------------------------------------------

class Conta:
	def __init__(self, saldo, numConta):
		self._saldo = saldo
		self._numConta = numConta

	def get_saldo(self):
		return self._saldo

	def set_saldo(self, saldo):
		self._saldo = saldo
		#if novoSaldo.isnumeric()
		if novoSaldo < 0:
			print("Digite um saldo positivo")
		else:
			self._saldo = novoSaldo

	def getNumConta(self):
		return self._numConta
	def setNumConta(self, novoNumero):
		self._numConta = novoNumero
		


conta1 = Conta(200.0)  
conta2 = Conta(300.0)
conta3 = Conta(-100.0)
#200.0
conta2.get_saldo()
#300
conta3.set_saldo(conta1.get_saldo() + conta2.get_saldo())
	conta3.get_saldo()
#500.0


class Conta:

def__init__(self, saldo):
	self._saldo = saldo

def get_saldo(self):
	return self._saldo

def set_saldo(self, saldo):
	self.saldo = saldo

---------------------------------------------------


class Animal:

	def__init(self, nome, cor):
		self._nome = nome
		self._cor = cor

	def comer(self):
		print(f"O {self._nome} está comendo!")

class Cachorro:
	def__init__(self, nome, cor):
	super().__init__(nome.cor)
-----------------------------------------------------

class Pokemon:
    def __init__(self, name, level, type):
        self.name = name
        self.level = level
        self.type = type
        self.max_health = level * 5
        self.current_health = self.max_health

    def __repr__(self):
        return f'{self.name} ({self.type}, Lvl {self.level}, HP {self.current_health}/{self.max_health})'

    def move(self):
        print(f'{self.name} used a move!')

    def take_damage(self, damage):
        self.current_health -= damage
        if self.current_health < 0:
            self.current_health = 0
        print(f'{self.name} took {damage} damage.')



    def heal(self, amount):
        self.current_health += amount
        if self.current_health > self.max_health:
            self.current_health = self.max_health
        print(f'{self.name} healed {amount} HP.')



class FirePokemon(Pokemon):
    def __init__(self, name, level):
        super().__init__(name, level, "Fire")
    
    def move(self):
        print(f'{self.name} used Ember!')

    def take_damage(self, damage):
        if self.type == "Water":
            damage *= 2
        elif self.type == "Grass":
            damage /= 2
        super().take_damage(damage)

class WaterPokemon(Pokemon):
    def __init__(self, name, level):
        super().__init__(name, level, "Water")

    def move(self):
        print(f'{self.name} used Bubblebeam!')

    def take_damage(self, damage):
        if self.type == "Grass":
            damage *= 2
        elif self.type == "Fire":
            damage /= 2
        super().take_damage(damage)

class GrassPokemon(Pokemon):
    def __init__(self, name, level):
        super().__init__(name, level, "Grass")

    def move(self):
        print(f'{self.name} used Vine Whip!')

    def take_damage(self, damage):
        if self.type == "Fire":
            damage *= 2
        elif self.type == "Water":
            damage /= 2
        super().take_damage(damage)



charmander = FirePokemon("Charmander", 5)
squirtle = WaterPokemon("Squirtle", 5)
bulbasaur = GrassPokemon("Bulbasaur", 5)

print(charmander)
print(squirtle)
print(bulbasaur)

charmander.move()
squirtle.move()
bulbasaur.move()

squirtle.take_damage(10)
bulbasaur.take_damage(10)
charmander.take_damage(10)
---------------------------------------------------

class Pokemon:
    def __init__(self, nome, level, tipo):
        self.nome = nome
        self.level = level
        self.tipo = tipo
        self.max_vida = level * 5
        self.vida_atual = self.max_vida

    def __repr__(self):
        return f'{self.nome} ({self.tipo}, Lvl {self.level}, HP {self.vida_atual}/{self.max_vida})'

    def movimento(self):
        print(f'{self.nome} usou um movimento!')

    def dano_recebido(self, damage):
        self.vida_atual -= damage
        if self.vida_atual < 0:
            self.vida_atual = 0
        print(f'{self.nome} levou {damage} de dano!.')



    def heal(self, amount):
        self.vida_atual += amount
        if self.vida_atual > self.max_vida:
            self.vida_atual = self.max_vida
        print(f'{self.nome} curou {amount} HP!.')



class PokemonFogo(Pokemon):
    def __init__(self, nome, level):
        super().__init__(nome, level, "Fogo")
    
    def movimento(self):
        print(f'{self.nome} usou Ember!')

    def dano_recebido(self, damage):
        if self.tipo == "Agua":
            damage *= 2
        elif self.tipo == "Grama":
            damage /= 2
        super().dano_recebido(damage)

class PokemonAgua(Pokemon):
    def __init__(self, nome, level):
        super().__init__(nome, level, "Agua")

    def movimento(self):
        print(f'{self.nome} usou Bubblebeam!')

    def dano_recebido(self, damage):
        if self.tipo == "Grama":
            damage *= 2
        elif self.tipo == "Fogo":
            damage /= 2
        super().dano_recebido(damage)

class PokemonGrama(Pokemon):
    def __init__(self, nome, level):
        super().__init__(nome, level, "Grass")

    def movimento(self):
        print(f'{self.nome} usou Vine Whip!')

    def dano_recebido(self, damage):
        if self.tipo == "Fogo":
            damage *= 2
        elif self.tipo == "Agua":
            damage /= 2
        super().dano_recebido(damage)



charmander = PokemonFogo("Charmander", 5)
squirtle = PokemonAgua("Squirtle", 5)
bulbasaur = PokemonGrama("Bulbasaur", 5)

print(charmander)
print(squirtle)
print(bulbasaur)

charmander.movimento()
squirtle.movimento()
bulbasaur.movimento()

squirtle.dano_recebido(10)
bulbasaur.dano_recebido(10)
charmander.dano_recebido(10)

------------------------------------


[
  {
    "nome": "Funcionario 1",
    "cpf": "111.111.111-11",
    "salario": 5000,
    "cargo": "Gerente",
    "departamento": "Vendas"
  },
  {
    "nome": "Funcionario 2",
    "cpf": "222.222.222-22",
    "salario": 6000,
    "cargo": "Vendedor",
    "departamento": "Vendas"
  },
  {
    "nome": "Rogerinho",
    "cpf": "Negativado",
    "salario": 1230,
    "cargo": "Piloto",
    "departamento": "Entregas"
  },
  {
    "nome": "Tarik Ponciano",
    "cpf": "123131231",
    "salario": 9999999.0,
    "cargo": "Instrutor",
    "departamento": "Senac"
  },
  {
    "nome": "qdqdqwdqw",
    "cpf": "123123123123",
    "salario": 12312312.0,
    "cargo": "qwdqwd",
    "departamento": "123123"
  },
  {
    "nome": "qdqwdqwd",
    "cpf": "13112314",
    "salario": 1231231231.0,
    "cargo": "adwfwfw",
    "departamento": "fwefwefw"
  }
]




--------------------------------------

import json

# CRUD - Create, Read, Update, Delete


def pegarListaAtualizada():

    with open("funcionario.json", 'r') as funcionariosJson:
        lista = json.load(funcionariosJson)

    return lista


def verFuncionarios():

    listaFuncionarios = pegarListaAtualizada()

    print("Lista de Funcionários: ")

    print("Nome | CPF | Salario | Cargo | Departamento")

    for funcionario in listaFuncionarios:

        print(
            f'{funcionario["nome"]} | {funcionario["cpf"]} | {funcionario["salario"]} | {funcionario["cargo"]} | {funcionario["departamento"]}')

    input()


def inserirFuncionario():

    funcionario = {}

    # for dado in funcionario.keys:

    #     insercao = input(f"Insira o {dado}")

    #     funcionario[dado] = insercao

    print("Inserir Novo Funcionário:")

    nomeFuncionario = input("Insira o nome do Funcionário: ")
    cpfFuncionario = input("Insira o cpf do Funcionario:")
    salarioFuncionario = input("Insira o salario do Funcionario:")
    cargoFuncionario = input("Insira o cargo do Funcionario:")
    departamentoFuncionario = input("Insira o departamento do Funcionario:")

    funcionario["nome"] = nomeFuncionario
    funcionario["cpf"] = cpfFuncionario
    funcionario["salario"] = float(salarioFuncionario)
    funcionario["cargo"] = cargoFuncionario
    funcionario["departamento"] = departamentoFuncionario

    listaFuncionarios = pegarListaAtualizada()
    listaFuncionarios.append(funcionario)

    with open("funcionario.json", 'w') as funcionariosJson:
        json.dump(listaFuncionarios, funcionariosJson, indent=2)


while True:

    print('''
    Bem vindo a Empresa XYZ
    Menu:
    1. Ver Funcionários
    2. Inserir Funcionário
    0. Sair
    
    ''')

    op = input("Escolha uma opção: ")

    match op:
        case "1":
            verFuncionarios()
        case "2":
            inserirFuncionario()
        case "0":
            print("Saindo do Programa...")
            break
--------------------------------------------

# Utilize o conceito de polimorfismo para
# criar um método checarVantagem na
# Classe Pokemon e modifique esse método
# nas subclasses de acordo com as
# vantagens e desvantagens daquele tipo.

# class Pokemon: 
#     def __init__(self, especie, tipo, hp, movimento, checarVantagem):
#         self._especie = especie 
#         self._tipo = tipo
#         self._hp = hp
#         self._movimento = movimento
#         # self._checarVantagem = checarVantagem

# def checar_Vantagem(self, dano):
#         self._hp -= dano
#         if self._hp < 0:
#             self._hp = 0
#         print(f'{self.name} took {dano} damage.')


#     def fazerBarulho(self):
#         print(f"{self._especie} fez um barrulhinho!")

# class PokemonFogo(Pokemon):

#     def __init__(self, especie, tipo, hp, movimento):
#         super().__init__(especie, tipo, hp, movimento)



# class PokemonAgua(Pokemon):

#     def __init__(self, especie, tipo, hp, movimento):
#         super().__init__(especie, tipo, hp, movimento)

# class PokemonGrama(Pokemon):

#     def __init__(self, especie, tipo, hp, movimento):
#         super().__init__(especie, tipo, hp, movimento)

------------------------------------------------------

import csv 

with open("advertising.csv", "r",) as arquivo:
	arquivo_csv = csv.reader(arquivo, delimiter=",")
	for i, linha in enumerate(arquivo_csv):
		if i == 0
			print("cabeçalho: " + str(linha))
		else:
			print("Valor: " + str(linha))


Cabeçalho: ['TV', 'Radio', 'Jornal', 'Vendas']
Valor: ['230.1', '37.8', '69.2', '22.1']
Valor: ['44.5', '39.3', '45.1', '10.4']
Valor: ['17.2', '45.9', '69.3', '12'] 
Valor: ['151.5', '41.3', '58.5', '16.5']
Valor: ['180.8', '10.8', '58.4', 17.9]
Valor:
Valor:
Valor:
Valor:
Valor:
Valor:
Valor:




"Pessoa": "Kildery"
"Sobrenome": "Leandro"


with open'('','r') as csv_arquivo:
	reader csv.reader(csv_arquivo)
	
	
	for raw in reader: 
		print(raw)
	csv_arquivo.close()


Proggram to demonstrate csv.reader() function: 

The csv file is opened for reading: 

The contents of the above file is a follows:

['Name', 'Age', 'Salary']
['', '', '']
['Anil', '26', '20000']
['', '', '']
['John', '28', '30000']
['', '', '']
['Sita', '25', '25000']



Pesquise diferentes formas de armazenamento e modelos de 
dados. Ex: Json, CSV, XML.

Json = O formato JSON é utilizado para armazenar e transmitir dados, 
enquanto que XML é utilizado para representar dados de uma forma legível 
por máquina. JSON tem vindo a ganhar popularidade como meio de armazenamento 
para aplicações web devido à sua simplicidade.


CSV = O arquivo CSV (valores separados por vírgulas) é um arquivo de 
texto com formato específico para possibilitar o salvamento dos dados
 em um formato estruturado de tabela.

  


XML = XML é a sigla para “Extensible Markup Language”, 
uma linguagem de marcação com regras para formatar documentos de 
forma que eles sejam facilmente lidos tanto por humanos quanto por máquinas. 
No Brasil, ficou popularizado por ser o tipo de arquivo mais utilizado na emissão
de notas fiscais digitais.


CRUD:
CREATE
READ
UPDATE
DELETE

Disciplina:
CodDisciplina
Nome
Codigo do Curso a qual ela pertence


//Matricula//:
NroMatricula
CodDisciplina
Semestre
Ano (varchar)
Nota
NroFalta (varchar)

//Matricula (Integer)// (exemplo)
CPF (Character) 11
Nome (Character Variyng) 255
Endereço (Character Varying) 255
Telefone (Character Varying) 255
Ano Nascimento (Integer) 

serial(numeric)

Please specify columns for primary key

NroMatricula
Cpf
Nome
Endereço
Telefone
Ano nascimento


SELECT "NroMatricula", "cpf", "nome" FROM "Alunos"

INSERT INTO "Alunos"
VALUES(defalut, 5433, 'Maria', default, default, 1999);

SELECT * FROM "Alunos"

INSERT INTO "Alunos"
VALUES (default


character = ''
UPDATE "Alunos"
SET "endereço" = 'Sem Rua'
WHERE 

ORDER BY "NroMatricula" ASC


UPDATE "Alunos"
SET "Endereço" = 'Com Rua'
WHERE 
"Endereço" = 'Sem Rua'

DELTE * FROM "Alunos"

DELETE FROM "Alunos"
WHERE "Nome" = 'Antedeguemon' AND "NroMatricula" 

(Criação de Tabela)

CREATE TABLE "Cursos"(
"ID_Cursos" Int, 
"Nome_Curso" char(255),
"Duração_Curso" int, 
PRIMARY KEY ("ID_Cursos")


)


DROP TABLE ""

ALTER TABLE "Alunos"
ADD "Nacionalidade" varchar(255) default 'Brasileiro'

SELECT * FROM "Alunos"


"Matricula"

CodDisciplina Character(255) 
Semestre Integer 
Ano Character varying
Nota Character (10)
NroFaltas Character Varying (8)
NroMatricula Integer 

"Disciplina"

CodDisciplina Character Varying(255)
Nome Character(255) 
CodCursoPertencen Character varying(255)

"Alunos"

NroMatricula Integer 
Cpf Character(11)
Nome Character varying(255)
Endereço Character Variyng(255)
Telefone Character Varying(255)
Ano Nascimento integer 


CREATE TABLE "Matricula"(
"Id" serial,
"CodDisciplina" int, 
"Semestre" int,
"Ano" date, 
"Nota" char, 
NroFaltas varchar,
NroMatricula int,
	
PRIMARY KEY ("Id")

	
	
);
 import psycopg2 


pip install psycopg2


conn = psycopg2.connect(dbname = "", host = "localhost", port="5432", user="postgres", password="postgres")

cursor = conn.cursor()

cursor.execute ('''
SELECT * FROM "Alunos"
''')

print(cursor.fetchall())




import psycopg2 

conn = psycopg2.connect(dbname = "Atv", host = "localhost", port="5432", user="postgres", password="postgres")
cursor = conn.cursor()

cursor.execute ('''
SELECT * FROM "Alunos"
ODER BY "NroMatricula" ASC
''')

print(cursor.fetchall())

for aluno in cursor.fetchall():
	print(f"{Alunos[0]} - {Alunos[2]}")

print(cursor.description)


while True():
	try:
		conn = psycopg2.connect(dbname = "Escola", host = "localhost", port="5432", user="postgres", password="postgres")
		cursor = conn.cursor()
	
		print("Conectado com Sucesso")
	except:(Exception, psycopg2.Error) as error:
		print("Ocorreu um erro!", error)



cursor.execute ('''	
CREATE TABLE "Alunos"(
"NroMatricula" serial,
"Nome" varchar(255) NOT NULL,
"CPF" char(11) NOT NULL, 
"Endereço" varchar (255) default 'Não informado',
"Telefone" char(11) default, 'xx-xxxx', 
"Ano Nascimento" integer 



''')


conn.comit()

cursor.execute('''
INSERT INTO "Alunos"
Values(default, 'João', '1234567890', default, 
default, 2005)

conn.comit()


conn.close()

cursor.execute('Select * FROM "Alunos"')
for aluno in cursor.


DROP TABLE IF EXISTS "Alunos"





